local M = {}
local colors = require("plugins/theme/colors").getColors()

-- TODO to core
vim.opt.background = "light"

-- local inspect = vim.inspect
-- vim.notify(inspect(colors), vim.log.levels.DEBUG)

local highlights = {
	Normal = { fg = colors.fg, bg = colors.bg },
	Terminal = { fg = colors.fg, bg = colors.bg },
	Visual = { fg = colors.bg, bg = colors.fg },
	VisualNOS = { fg = colors.bg, bg = colors.fg },

	-- This is a comment
	SpecialComment = { fg = colors.fg6, style = "bold,italic" },
	-- TODO: this is a todo comment
	Todo = { fg = colors.fg4, style = "bold" },

	LineNr = { fg = colors.fg6 },
	CursorLineNr = { fg = colors.fg, bg = colors.bg2 },

	Cursor = { fg = colors.bg, bg = colors.fg },
	lCursor = { fg = colors.bg, bg = colors.fg },
	CursorIM = { fg = colors.bg, bg = colors.fg },
	CursorColumn = { fg = colors.fg, bg = colors.fg },

	CursorLine = { bg = colors.bg2, },

	ColorColumn = { bg = colors.bg2 },
	Conceal = { fg = colors.fg5 },

	IncSearch = { fg = colors.bg, bg = colors.bright_blue, style = "bold" },
	Search = { fg = colors.fg8, bg = colors.bg4 },

	-- TODO
	PmenuSel = { fg = colors.fg, bg = colors.bg2 },
	PmenuSbar = { fg = colors.fg, bg = colors.bg4 },
	PmenuThumb = { fg = colors.bg, bg = colors.bg6 },

	-- TODO можно ли сделать волнистую линию?
	SpellBad = { fg = colors.base9, style = "underline" },
	SpellCap = { fg = colors.base9, style = "underline" },
	SpellLocal = { fg = colors.base9, style = "underline" },
	SpellRare = { fg = colors.base9, style = "underline" },

	ModeMsg = { fg = colors.bg, bg = colors.fg },
	StatusLine = { fg = colors.fg2, bg = colors.bg2 },
	StatusLineNC = { bg = colors.bg2 },

	MatchParen = { fg = colors.fg, bg = colors.bg4, style = "bold" },

	VertSplit = { fg = colors.fg, bg = colors.bg },

	TSBoolean = { style = "bold" },
	TSComment = { fg = colors.fg5, style = "italic" },
	TSConditional = { fg = colors.fg5 },
	TSConstBuiltin = { fg = colors.fg3 },
	TSKeyword = { fg = colors.fg5 },
	TSString = { fg = colors.fg, style = "italic" },
	TSStringRegex = { fg = colors.fg, style = "italic" },
	TSException = {},
	TSFunction = {},
	TSConstant = { style = "bold" },
	TSAnnotation = { style = "bold" },
	TSNumber = { style = "bold" },
	TSVariable = { fg = colors.fg5, style = "bold,italic" },
	TSType = {},
	Special = { fg = colors.fg2 },
	Directory = {},
	NonText = { fg = colors.base9, },

	-- TODO это значение почемуто влияет на очень много групп. пересмотри
	-- TODO не нашел применения в коде, оставляю в формате дебага. потом обозначить
	-- TSError = { bg = colors.red, style = "underline,italic" },
	-- MoreMsg = { bg = colors.debug },
	-- Pmenu = { fg = colors.debug, bg = colors.debug },
	-- TSConstMacro = { bg = colors.red },
	-- TSConstructor = { fg = colors.red },
	-- TSField = { fg = colors.red },
	-- TSFloat = { fg = colors.red, style = "bold" },
	-- TSFuncBuiltin = { fg = colors.red },
	-- TSFuncMacro = { fg = colors.red },
	-- TSInclude = { fg = colors.red },
	-- TSKeywordFunction = { fg = colors.red, style = "italic" },
	-- TSKeywordOperator = { fg = colors.red, style = "italic" },
	-- TSKeywordReturn = { fg = colors.red, style = "bold" },
	-- TSAttribute = { fg = colors.red },
	-- TSLabel = { fg = colors.red },
	-- TSMethod = { fg = colors.red },
	-- TSNamespace = { fg = colors.red },
	-- TSNone = { fg = colors.red },
	-- TSOperator = { fg = colors.red },
	-- TSParameter = { fg = colors.red },
	-- TSParameterReference = { fg = colors.red },
	-- TSProperty = { fg = colors.red },
	-- TSPunctDelimiter = { fg = colors.red },
	-- TSPunctBracket = { fg = colors.red },
	-- TSPunctSpecial = { fg = colors.red },
	-- TSRepeat = { fg = colors.red },
	-- TSStringEscape = { fg = colors.red },
	-- TSSymbol = { fg = colors.red },
	-- TSTag = { fg = colors.red },
	-- TSTagDelimiter = { fg = colors.red },
	-- TSText = { fg = colors.red },
	-- TSStrong = { fg = colors.red },
	-- TSEmphasis = { fg = colors.red },
	-- TSUnderline = { fg = colors.red },
	-- TSStrike = { fg = colors.red },
	-- TSTitle = { fg = colors.red },
	-- TSLiteral = { fg = colors.red },
	-- TSURI = { fg = colors.red },
	-- TSMath = { fg = colors.red },
	-- TSTextReference = { fg = colors.red },
	-- TSEnvironment = { fg = colors.red },
	-- TSEnvironmentName = { fg = colors.red },
	-- TSNote = { fg = colors.red },
	-- TSWarning = { fg = colors.red },
	-- TSDanger = { fg = colors.red },
	-- TSTypeBuiltin = { fg = colors.red },
	-- TSVariableBuiltin = { fg = colors.red },

	-- EndOfBuffer = { fg = colors.debug },
	-- ErrorMsg = { fg = colors.debug },
	-- FoldColumn = { fg = colors.debug },
	-- Folded = { fg = colors.debug },
	-- Question = { fg = colors.debug },
	-- SignColumn = { fg = colors.debug },
	-- SpecialKey = { fg = colors.debug },
	-- Substitute = { fg = colors.debug },
	-- TabLine = { fg = colors.debug },
	-- TabLineFill = { fg = colors.debug },
	-- TabLineSel = { fg = colors.debug },

	-- WarningMsg = { fg = colors.debug },
	-- WildMenu = { fg = colors.debug },
	-- Ignore = { fg = colors.debug },
	-- PreProc = { fg = colors.debug },

	-- ToolbarLine = { fg = colors.debug },
	-- ToolbarButton = { fg = colors.debug },

	-- qfLineNr = { fg = colors.debug },
	Whitespace = { fg = colors.debug },

	-- PmenuSelBold = { fg = colors.debug },
	-- NormalFloat = { fg = colors.debug },
	-- QuickFixLine = { fg = colors.debug },
	-- Debug = { fg = colors.debug },
	-- debugBreakpoint = { fg = colors.debug },
	-- PreCondit = { fg = colors.debug },
	-- Statement = { fg = colors.debug },
	-- Typedef = { fg = colors.debug },

	Bold = { link = "TSStrong" },
	Boolean = { link = "TSBoolean" },
	Character = { link = "TSCharacter" },
	Comment = { link = "TSComment" },
	Conditional = { link = "TSConditional" },
	Constant = { link = "TSConstant" },
	Define = { link = "TSConstBuiltin" },
	Delimiter = { link = "TSPunctDelimiter" },
	Error = { link = "TSError" },
	Exception = { link = "TSException" },
	Float = { link = "TSFloat" },
	Function = { link = "TSFunction" },
	Identifier = { link = "TSVariable" },
	Include = { link = "TSInclude" },
	Italic = { link = "TSEmphasis" },
	Keyword = { link = "TSKeyword" },
	Label = { link = "TSLabel" },
	Macro = { link = "TSFuncMacro" },
	Number = { link = "TSNumber" },
	Operator = { link = "TSOperator" },
	Repeat = { link = "TSRepeat" },
	SpecialChar = { link = "TSStringEscape" },
	String = { link = "TSString" },
	Structure = { link = "TSAnnotation" },
	Field = { link = "TSProperty" },
	Tag = { link = "TSTag" },
	Title = { link = "TSTitle" },
	Type = { link = "TSType" },
	Underlined = { link = "TSUnderline" },
	asciidocAttributeEntry = { link = "TSAttribute" },
	cIncluded = { link = "TSConstructor" },
	healthError = { link = "TSDanger" },
	healthWarning = { link = "TSWarning" },
	rubySymbol = { link = "TSSymbol" },
	xmlNamespace = { link = "TSNamespace" },
}



-- TODO set-serminal-colors
local function setTerminalColor()
	vim.g.terminal_color_0  = colors.base0
	vim.g.terminal_color_1  = colors.base1
	vim.g.terminal_color_2  = colors.base2
	vim.g.terminal_color_3  = colors.base3
	vim.g.terminal_color_4  = colors.base4
	vim.g.terminal_color_5  = colors.base5
	vim.g.terminal_color_6  = colors.base6
	vim.g.terminal_color_7  = colors.base7
	vim.g.terminal_color_8  = colors.base8
	vim.g.terminal_color_9  = colors.base9
	vim.g.terminal_color_10 = colors.base10
	vim.g.terminal_color_11 = colors.base11
	vim.g.terminal_color_12 = colors.base12
	vim.g.terminal_color_13 = colors.base13
	vim.g.terminal_color_14 = colors.base14
	vim.g.terminal_color_15 = colors.base15
end

local function highlight(group, color)
	if color.link then
		vim.api.nvim_command("highlight! link " .. group .. " " .. color.link)
	else
		local style = color.style and "gui=" .. color.style or color.preserve and "" or " gui=NONE cterm=NONE"
		local fg = color.fg and "guifg=" .. color.fg or color.preserve and "" or "guifg=NONE ctermfg=NONE"
		local bg = color.bg and "guibg=" .. color.bg or color.preserve and "" or "guibg=NONE ctermbg=NONE"
		local sp = color.sp and "guisp=" .. color.sp or color.preserve and "" or "guisp=NONE"
		vim.api.nvim_command("highlight " .. group .. " " .. style .. " " .. fg .. " " .. bg .. " " .. sp)
	end
end

local function set_highlights(tbl)
	vim.api.nvim_command("hi clear")
	if vim.fn.exists("syntax_on") then
		vim.api.nvim_command("syntax reset")
	end

	vim.o.termguicolors = true
	-- TODO colors name
	vim.g.colors_name = "monochrome"

	for group, tables in pairs(tbl) do
		highlight(group, tables)
	end

	setTerminalColor()

	-- TODO split highlight into core and plugin
	-- local plugin_syntax = M.load_plugin_syntax()
	-- for group, tables in pairs(plugin_syntax) do
	-- 	M.highlight(group, tables)
	-- end
end

function M.setup()
	set_highlights(highlights)
end

return M
