local colors = require("plugins/theme/colors").getColors()

local M = {
		TSBoolean = { fg = colors.fg, style = "bold" },
		TSCharacter = { fg = colors.fg },
		TSComment = { fg = colors.fg5, style = "italic" },
		TSConditional = { fg = colors.fg },
		TSConstant = { fg = colors.fg },
		TSConstBuiltin = { fg = colors.fg },
		TSConstructor = { fg = colors.fg },
		TSError = { style = "undercurl", sp = colors.red },
		TSException = { style = "underline,bold" },
		TSField = { fg = colors.fg },
		TSFloat = { fg = colors.fg, style = "bold" },
		TSFunction = { fg = colors.fg },
		TSFuncBuiltin = { fg = colors.fg },
		TSFuncMacro = { fg = colors.fg },
		TSInclude = { fg = colors.fg },
		TSKeyword = { fg = colors.fg },
		TSKeywordFunction = { fg = colors.fg },
		TSKeywordOperator = { fg = colors.fg },
		TSKeywordReturn = { fg = colors.fg },
		TSLabel = { fg = colors.fg },
		TSMethod = { fg = colors.fg },
		TSNamespace = { fg = colors.fg },
		TSNone = { fg = colors.fg },
		TSNumber = { fg = colors.fg, style = "bold" },
		TSOperator = { fg = colors.fg },
		TSParameter = { fg = colors.fg },
		TSParameterReference = { fg = colors.fg },
		TSProperty = { fg = colors.fg },
		TSPunctDelimiter = { fg = colors.fg },
		TSPunctBracket = { fg = colors.fg },
		TSPunctSpecial = { fg = colors.fg },
		TSRepeat = { fg = colors.fg },
		TSString = { fg = colors.fg },
		TSStringRegex = { fg = colors.fg },
		TSStringEscape = { fg = colors.fg },
		TSSymbol = { fg = colors.fg },
		TSTag = { fg = colors.fg },
		TSText = { fg = colors.fg },
		TSStrong = { style = "bold" },
		TSEmphasis = { style = "italic" },
		TSUnderline = { style = "underline" },
		TSStrike = { style = "strikethrough" },
		TSLiteral = { fg = colors.fg },
		TSNote = { style = "bold" },
		TSWarning = { fg = colors.yellow, style = "bold" },
		TSDanger = { fg = colors.red, style = "bold" },
		TSType = { fg = colors.fg },
		TSTypeBuiltin = { fg = colors.fg },
		TSVariable = { fg = colors.fg },
		TSVariableBuiltin = { fg = colors.fg },
		
		Bold = { link = "TSStrong" },
		Boolean = { link = "TSBoolean" },
		Character = { link = "TSCharacter" },
		Comment = { link = "TSComment" },
		Conditional = { link = "TSConditional" },
		Constant = { link = "TSConstant" },
		Define = { link = "TSConstBuiltin" },
		Delimiter = { link = "TSPunctDelimiter" },
		Error = { link = "TSError" },
		Exception = { link = "TSException" },
		Float = { link = "TSFloat" },
		Function = { link = "TSFunction" },
		Identifier = { link = "TSVariable" },
		Include = { link = "TSInclude" },
		Italic = { link = "TSEmphasis" },
		Keyword = { link = "TSKeyword" },
		Label = { link = "TSLabel" },
		Macro = { link = "TSFuncMacro" },
		Number = { link = "TSNumber" },
		Operator = { link = "TSOperator" },
		Repeat = { link = "TSRepeat" },
		SpecialChar = { link = "TSStringEscape" },
		String = { link = "TSString" },
		Structure = { link = "TSAnnotation" },
		Field = { link = "TSProperty" },
		Tag = { link = "TSTag" },
		Title = { link = "TSTitle" },
		Type = { link = "TSType" },
		Underlined = { link = "TSUnderline" },
		asciidocAttributeEntry = { link = "TSAttribute" },
		cIncluded = { link = "TSConstructor" },
		healthError = { link = "TSDanger" },
		healthWarning = { link = "TSWarning" },
		rubySymbol = { link = "TSSymbol" },
		xmlNamespace = { link = "TSNamespace" },
		
		ErrorMsg = { fg = colors.red, style = "bold" },
		Substitute = { fg = colors.fg, bg = colors.bg3, style = "bold" },
		TabLineSel = { style = "reverse" },
		WildMenu = { style = "reverse" },
		ToolbarLine = { bg = colors.bg },
		ToolbarButton = { style = "bold" },
		-- INFO coc-window
		NormalFloat = { link = "Pmenu" },
		Typedef = { fg = colors.fg2 },

		FoldColumn = {},
		Folded = {},
		Question = {},
		SpecialKey = {},
		TabLine = {},
		TabLineFill = {},
		WarningMsg = { fg = colors.yellow, style = "bold" },
		Ignore = {},
		qfLineNr = {},
		PmenuSelBold = {},
		QuickFixLine = {},
		debugBreakpoint = {},
		Debug = {},
		PreCondit = {},
		TSTitle = {},
		TSURI = {},
		TSMath = {},
		TSTextReference = {},
		TSEnvironment = {},
		TSEnvironmentName = {},
		TSTagDelimiter = {},
		TSConstMacro = {},
		TSAnnotation = {},
		TSAttribute = {},
}

return M
